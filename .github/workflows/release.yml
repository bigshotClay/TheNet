name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=1g"

jobs:
  build-release:
    name: "ðŸš€ Build Release"
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platforms: "desktop,android"
            artifact-name: "release-linux"
          - os: windows-latest  
            platforms: "desktop"
            artifact-name: "release-windows"
          - os: macos-latest
            platforms: "desktop,ios"  
            artifact-name: "release-macos"
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Android SDK
        if: contains(matrix.platforms, 'android')
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: Make gradlew executable
        if: matrix.os != 'windows-latest'
        run: chmod +x ./gradlew
        
      - name: Build Release
        run: ./gradlew build --parallel --configuration-cache -Prelease=true
        
      - name: Run Tests
        run: ./gradlew testAll --parallel --continue
        
      - name: Build Android Release APK
        if: contains(matrix.platforms, 'android')
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: ./gradlew :android:assembleRelease
        
      - name: Build Desktop Distribution
        if: contains(matrix.platforms, 'desktop')
        run: ./gradlew :desktop:packageDistributionForCurrentOS
        
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            android/build/outputs/apk/release/*.apk
            android/build/outputs/bundle/release/*.aab
            desktop/build/compose/binaries/main/*/
            desktop/build/distributions/
            **/build/libs/
          retention-days: 30

  create-release:
    name: "ðŸ“¦ Create Release"
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Generate Changelog
        id: changelog
        run: |
          # Get version from tag or input
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "# Release $VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first release of TheNet." >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## ðŸ“± Downloads" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Android" >> CHANGELOG.md
          echo "- **APK**: Download from release assets" >> CHANGELOG.md
          echo "- **AAB**: For Google Play Store distribution" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Desktop" >> CHANGELOG.md
          echo "- **Linux**: Download the .deb package or AppImage" >> CHANGELOG.md
          echo "- **Windows**: Download the .msi installer or portable .zip" >> CHANGELOG.md
          echo "- **macOS**: Download the .dmg package" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## âœ… Verification" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All builds are signed and have passed:" >> CHANGELOG.md
          echo "- âœ… Unit and integration tests" >> CHANGELOG.md
          echo "- âœ… Code quality checks (detekt, ktlint)" >> CHANGELOG.md
          echo "- âœ… Security scanning" >> CHANGELOG.md
          echo "- âœ… Dependency vulnerability scanning" >> CHANGELOG.md
          
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release
          gh release create ${{ steps.changelog.outputs.version }} \
            --title "TheNet ${{ steps.changelog.outputs.version }}" \
            --notes-file CHANGELOG.md \
            --draft=false \
            --prerelease=${{ contains(steps.changelog.outputs.version, '-') }} \
            artifacts/**/*
            
      - name: Notify Success
        run: |
          echo "ðŸŽ‰ Release ${{ steps.changelog.outputs.version }} created successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- Android APK and AAB files" >> $GITHUB_STEP_SUMMARY
          echo "- Desktop distributions for all platforms" >> $GITHUB_STEP_SUMMARY
          echo "- Library JARs for all modules" >> $GITHUB_STEP_SUMMARY